@page "/"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using MySmartHome.DAL.Models
@using Client.Blazor.Auth.Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient http
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Smart Home</PageTitle>

<h3>@authMessage</h3>

<br />

<div>
    Hello everyone! I would like to present to you my project. My project is a web application 
    based on Blazor technology, which interacts with a server-side 
    based on RestAPI, and a PostgreSQL database. The front-end app is hosted on Azure app service, 
    while the back-end and the database are located in Docker containers on AWS ec2 instance.
</div><br />
<div>
    In my server-side, I used MQTT protocol to exchange messages between the sensors and the server. 
    This protocol provides reliable delivery of messages in low bandwidth network conditions and 
    intermittent client connectivity, making my application more flexible and resilient to network failures.
</div>
<br />
<div>
    My client application allows unauthenticated users to view data in the "Sensors" section. 
    However, to perform any actions or gain full access to the application's functionality, 
    user authentication is required. For this purpose, I used JWT token-based authentication technology.
</div>
<br />


<SurveyPrompt Title="Thank you for your attention!" />

@code{

    private string authMessage;
    private string surnameMessage;
    private string message;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user1 = authState.User;

        if (user1.Identity.IsAuthenticated)
        {
            authMessage = $"Welcome, {user1.Identity.Name}";
            claims = user1.Claims;
            surnameMessage = $"Surname: {user1.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
        }
        else
        {
            authMessage = "You are not authorized";
        }
    }
}