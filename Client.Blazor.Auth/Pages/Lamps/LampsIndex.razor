@page "/lamps"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using MySmartHomeWebApi.Models
@using MySmartHomeWebApi.Data.Interfaces
@using Client.Blazor.Auth.Data
@using System.Security.Claims
@using WebApiClients.Repositories

@inject TokenStorage tokenStorage
@inject AuthenticationStateProvider provider
@inject IEntityRepository<Lamps> repo

<h3>Lamps</h3>

@if (lamps == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="col-md-6">
        <a href='/lamps/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add new lamp
        </a>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Time Update</th>
                <th>Topic Up</th>
                <th>Topic Down</th>
                <th>Status</th>
                <th>Room Name</th>
                <th> </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var lamp in lamps)
            {
                <tr>
                    <td>@lamp.Name</td>
                    <td>@lamp.DateTimeUpdate.ToLocalTime()</td>
                    <td>@lamp.TopicUp</td>
                    <td>@lamp.TopicDown</td>
                    <td>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" role="switch" @bind=@lamp.Status />
                        </div>
                        @*<input type="checkbox" @bind=@lamp.Status />*@
                    </td>
                    <td>@lamp.RoomName</td>
                    <td>
                        <a href="lamps/edit/@lamp.Id">Edit</a> |
                        <a href="lamps/details/@lamp.Id">Details</a> |
                        <a href="lamps/delete/@lamp.Id">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    IEnumerable<Lamps>? lamps;
    WebRepository<Lamps> webRepo;
    protected override async Task OnInitializedAsync()
    {
        webRepo = (WebRepository<Lamps>)repo;
        var authState = await provider.GetAuthenticationStateAsync();
        var user = authState.User;
        var t = tokenStorage.GetTokenByEmail(user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value!);
        webRepo.SetDefaultRequestHeaders(t);
        lamps = await webRepo.GetAll();
    }
    
    public async Task EditLamp(Guid id)
    {
        var lamp = lamps.FirstOrDefault(s => s.Id == id);
        lamp.DateTimeUpdate = DateTime.Now;
        lamp = await webRepo.Update(lamp);
    }
}
