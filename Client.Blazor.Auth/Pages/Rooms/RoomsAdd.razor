@page "/rooms/add"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using MySmartHome.DAL.Models
@using MySmartHome.DAL.Repositories.Interfaces
@using Client.Blazor.Auth.Data
@using System.Security.Claims
@using WebApiClients.Repositories

@inject ITokenStorage tokenStorage
@inject AuthenticationStateProvider provider
@inject IEntityRepository<Rooms> roomRepo
@inject IEntityRepository<Lamps> lampRepo
@inject IEntityRepository<Sensors> sensorRepo
@inject NavigationManager NavManager

<h3>RoomsAdd</h3>

<div>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            <label>Name</label>
        </dt>
        <dd class="col-sm-10">
            <input @bind=@room.Name />
        </dd>
        @*<dt class="col-sm-2">
            <label>Sensors</label>
        </dt>
        <dd class="col-sm-10">
            <datalist @bind=@room.Sensors />
            <button class="btn btn-primary" @onclick="AddSensor">Add sensor</button>
            @if (isSensorVisible)
            {
                <select @bind="selectedSensors" multiple>
                    @foreach (var sensor in sensors)
                    {
                        <option value="@sensor.Name">@sensor.Name</option>
                    }
                </select>
            }
        </dd>
        
        <dt class="col-sm-2">
            <label>Lamps</label>
        </dt>
        <dd class="col-sm-10">
            <datalist @bind=@room.Lamps />
            <button class="btn btn-primary" @onclick="AddLamp">Add lamp</button>
            @if (isLampVisible)
            {
                <select @bind="selectedLamps" multiple>
                    @foreach (var lamp in lamps)
                    {
                        <option value="@lamp.Name">@lamp.Name</option>
                    }
                </select>
            }
        </dd>*@
    </dl>
    <button class="btn btn-primary" @onclick="AddRoom">Add room</button>
</div>
<div>
    <a href="rooms">Back to List</a>
</div>


@code {
    Rooms room = new Rooms();
    IEnumerable<Lamps>? lamps;
    IEnumerable<Sensors>? sensors;
    bool isLampVisible = false;
    bool isSensorVisible = false;
    string[] selectedLamps = new string[] { };
    string[] selectedSensors = new string[] { };

    WebRepository<Lamps> webRepoLamp;

    protected override async Task OnInitializedAsync()
    {
        webRepoLamp = (WebRepository<Lamps>)lampRepo;
        var webRepoSensor = (WebRepository<Sensors>)sensorRepo;

        var authState = await provider.GetAuthenticationStateAsync();
        var user = authState.User;
        var t = tokenStorage.GetToken(user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value!);
        webRepoLamp.SetDefaultRequestHeaders(t);
        webRepoSensor.SetDefaultRequestHeaders(t);

        lamps = await webRepoLamp.GetAll();
        sensors = await webRepoSensor.GetAll();

    }

    protected async Task AddRoom()
    {
        var webRepo = (WebRepository<Rooms>)roomRepo;
        var authState = await provider.GetAuthenticationStateAsync();
        var user = authState.User;
        var t = tokenStorage.GetToken(user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value!);
        webRepo.SetDefaultRequestHeaders(t);

        room.Id = Guid.NewGuid();
        //room.Lamps = lamps.Where(s => selectedLamps.Contains(s.Name)).ToList();
        //room.Sensors = sensors.Where(s => selectedSensors.Contains(s.Name)).ToList();
        await webRepo.Add(room);
        NavManager.NavigateTo("/rooms");
    }

    private void AddLamp()
    {
        isLampVisible = true;
    }

    private void AddSensor()
    {
        isSensorVisible = true;
    }
}
